using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using StoreManagement.BLL;
using StoreManagement.DAL.DAO;
using StoreManagement.DAL.GATEWAY;
using StoreManagement.UTILITY;
using System.Text.RegularExpressions;

namespace StoreManagement.UI
{
    public partial class PurchaseOrderEntryUI : Form
    {
        #region Veriables
            private PurchaseManager purchaseManager = null;
            private Requisition requisition = null;
            private bool IsEdit = false;
        #endregion
        #region Form custom border

        int borderRadius = 30;
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
        {
            base.OnPaint(e);
            Graphics g = e.Graphics;
            Pen p = new Pen(Color.Black);
            int height = Height;
            int width = Width;
            // 4 Border Lines
            // x1,y1 -----> x2 y2 Left Border Line
            // x3y3  -----> x4,y4 Bottom Border Line
            // x5,y5 -----> x6,y6 Right Border Line
            // x7,y7 -----> x8,y8 Top Border Line

            // x1,y1 ( Left Top), x2,y2 ( Left Bottom of Left Border), x3,y3 (Left Bottom of Bottom Border),  x4,y4 (Right Bottom of Bottom Border)
            int x1 = 0, y1 = 0, x2 = 0, y2 = Height, x3 = 0, y3 = Height, x4 = Width, y4 = Height;
            // x5,y5 ( Bottom Right) x6,y6 (Top Right) x7,y7 Right Top
            int x5 = Width, y5 = Height, x6 = Width, y6 = 0, x7 = Width, y7 = 0, x8 = 0, y8 = 0;
            System.Drawing.Drawing2D.GraphicsPath gp = new System.Drawing.Drawing2D.GraphicsPath();
            y1 = borderRadius / 2;
            x8 = borderRadius / 2;
            y2 = height - (borderRadius / 2);
            x3 = borderRadius / 2;
            x4 = Width - (borderRadius / 2);
            y5 = Height - (borderRadius / 2);
            y6 = borderRadius / 2;
            x7 = Width - (borderRadius / 2);
            // Top Left Arc
            gp.AddArc(new Rectangle(0, 0, borderRadius, borderRadius), 180, 90);
            // Left Border
            gp.AddLine(new Point(x1, y1), new Point(x2, y2));
            // Bottom Left Arc
            gp.AddArc(new Rectangle(0, height - borderRadius, borderRadius, borderRadius), 90, 90);
            // Bottom Line
            gp.AddLine(new Point(x3, y3), new Point(x4, y4));
            // Bottom Right Arc
            gp.AddArc(new Rectangle(width - borderRadius, height - borderRadius, borderRadius, borderRadius), 0, 90);
            // Right Border
            gp.AddLine(new Point(x5, y5), new Point(x6, y6));
            // Top Right Border
            gp.AddArc(width - borderRadius, 0, borderRadius, borderRadius, 270, 90);
            // Top Border
            gp.AddLine(new Point(x7, y7), new Point(x8, y8));
            gp.CloseFigure();
            this.Region = new Region(gp);
        }

        #endregion
        public PurchaseOrderEntryUI()
        {
            InitializeComponent();
            SetObjects();
        }

        private void SetObjects()
        {
            purchaseManager = new PurchaseManager();
        }

        private void PurchaseOrderEntryUI_Load(object sender, EventArgs e)
        {
            SetUpdateData("1001");
        }

        private void SetUpdateData(string reqNo)
        {
            DataTable purchaseReq;
            purchaseReq = purchaseManager.GetPurchaseRequistionList("3", reqNo);

            if (purchaseReq.Rows.Count > 0)
            {
                reqNoTextBox.Text = purchaseReq.Rows[0]["ReqNo"].ToString();
                int n;

                foreach (DataRow dr in purchaseReq.Rows)
                {
                    //fill the MRR GridView
                    n = pOrdDataGridView.Rows.Add();
                    pOrdDataGridView.Rows[n].Cells[1].Value = dr["Item"].ToString();
                    pOrdDataGridView.Rows[n].Cells[2].Value = dr["Unit"].ToString();
                    pOrdDataGridView.Rows[n].Cells[3].Value = dr["Required"].ToString();
                    pOrdDataGridView.Rows[n].Cells[5].Value = dr["Required"].ToString();
                    pOrdDataGridView.Rows[n].Cells[7].Value = dr["GoodsID"].ToString();
                    pOrdDataGridView.Rows[n].Cells[9].Value = dr["ReqID"].ToString();
                }
            }
        }

        private void closeLabel_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void closeButton_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void saveButton_Click(object sender, EventArgs e)
        {
            if (IsValid())
            {
                if (purchaseManager.PurOrdManagement(requisition))
                {
                    MessageBox.Show("Saved Successfully.");
                }
                requisition = null;
            }

        }

        //validation
        private bool IsValid()
        {
            if (string.IsNullOrEmpty(cepNoTextBox.Text.Trim()))
            {
                MessageBox.Show("Enter CEP No.");
                cepNoTextBox.Focus();
                return false;
            }
            else if (string.IsNullOrEmpty(purOrdNoTextBox.Text.Trim()))
            {
                MessageBox.Show("Enter Purchase Order No.");
                purOrdNoTextBox.Focus();
                return false;
            }
            else if (string.IsNullOrEmpty(supplierTextBox.Text.Trim()))
            {
                MessageBox.Show("Select a Supplier.");
                supplierTextBox.Focus();
                return false;
            }
            //else if (yearTextBox.Text.Trim().Length != 4)
            //{
            //    MessageBox.Show("Invalid year.");
            //    yearTextBox.Focus();
            //    return false;
            //}
            else
            {
                SetValues();
            }
            return true;
        }


        //set the input data
        private void SetValues()
        {
            if (requisition == null)
            {
                requisition = new Requisition();
            }

            requisition.PrrNo = reqNoTextBox.Text.Trim();
            requisition.CepNO = cepNoTextBox.Text.Trim();
            requisition.PurOrdNo = purOrdNoTextBox.Text.Trim();
            requisition.PurOrdDate = purOrdDate.Value;
            requisition.SupplierID = Convert.ToInt32(supplierTextBox.Text.Trim());
            requisition.TotalItem = Convert.ToInt32(totalItemLabel.Text.Split(':')[1].Trim());

            foreach (DataGridViewRow gridItem in pOrdDataGridView.Rows)
            {
                if (gridItem.Cells[1].Value != null)
                {
                    //Initialize a new PRR product
                    Product prrProduct = new Product();

                    DataGridViewCheckBoxCell chk = (DataGridViewCheckBoxCell)gridItem.Cells[0];
                    if (chk.Value != null && (bool)chk.Value)
                    {
                        if (IsEdit && (gridItem.Cells[8].Value != null && !string.IsNullOrEmpty(gridItem.Cells[8].Value.ToString())))
                        {
                            prrProduct.ReqQty = Convert.ToDecimal(gridItem.Cells[3].Value.ToString().Trim());
                            prrProduct.UnitPrice = Convert.ToDecimal(gridItem.Cells[4].Value.ToString().Trim());
                            prrProduct.IssueQty = Convert.ToDecimal(gridItem.Cells[5].Value.ToString().Trim());
                            prrProduct.PID = gridItem.Cells[8].Value.ToString().Trim();
                            prrProduct.ReqPID = gridItem.Cells[9].Value.ToString().Trim();
                            prrProduct.Condition = "2";
                        }
                        else
                        {
                            prrProduct.ReqQty = Convert.ToDecimal(gridItem.Cells[3].Value.ToString().Trim());
                            prrProduct.UnitPrice = Convert.ToDecimal(gridItem.Cells[4].Value.ToString().Trim());
                            prrProduct.IssueQty = Convert.ToDecimal(gridItem.Cells[5].Value.ToString().Trim());
                            prrProduct.PCode = gridItem.Cells[7].Value.ToString().Trim();
                            prrProduct.ReqPID = gridItem.Cells[9].Value.ToString().Trim();
                        }
                        requisition.Products.Add(prrProduct);
                    }
                }
            }
        }

        private void yearTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!Regex.IsMatch(e.KeyChar.ToString(), @"[\x08\x2E\d]"))
            {
                e.Handled = true;
            }

            if (e.KeyChar == 46)
            {
                if ((sender as TextBox).Text.Contains("."))
                    e.Handled = true;
            }
        }

        
        private void pOrdDataGridView_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            decimal unitPrice = 0;
            Int32 totalOrdered = 0;
            try
            {
                if (pOrdDataGridView.CurrentRow != null)
                {
                    switch (e.ColumnIndex)
                    {
                        case 4:
                            if (pOrdDataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex + 1].Value == null)
                            {
                                pOrdDataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex + 1].Selected = true;
                            }
                            else if (pOrdDataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex].Value != null)
                            {
                                unitPrice = Convert.ToDecimal((string.IsNullOrEmpty(pOrdDataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString()) ? "0" : pOrdDataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString()));
                                totalOrdered = Convert.ToInt32((string.IsNullOrEmpty(pOrdDataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex+1].Value.ToString()) ? "0" : pOrdDataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex+1].Value.ToString()));
                                pOrdDataGridView.Rows[e.RowIndex].Cells[6].Value = unitPrice * totalOrdered;

                                //Calculate the total qty
                                //totalQtyLabel.Text = TotalDeliveryQty();
                            }
                            break;
                        case 5:
                            if (pOrdDataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex - 1].Value == null)
                            {
                                pOrdDataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex - 1].Selected = true;
                            }
                            else if (pOrdDataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex].Value != null)
                            {
                                unitPrice = Convert.ToDecimal((string.IsNullOrEmpty(pOrdDataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex - 1].Value.ToString()) ? "0" : pOrdDataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex - 1].Value.ToString()));
                                totalOrdered = Convert.ToInt32((string.IsNullOrEmpty(pOrdDataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString()) ? "0" : pOrdDataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString()));
                                pOrdDataGridView.Rows[e.RowIndex].Cells[6].Value = unitPrice * totalOrdered;

                                //Calculate the total qty
                                //totalQtyLabel.Text = TotalDeliveryQty();
                            }
                            break;
                    }
                }
            }
            catch { }
        }


        //Get the total selected items
        private string TotalItemQty()
        {
            decimal totalQty = 0;
            try
            {
                foreach (DataGridViewRow gridRow in pOrdDataGridView.Rows)
                {
                    //totalQty += Convert.ToDecimal((gridRow.Cells[7].Value == null ? "0" : gridRow.Cells[7].Value.ToString()));
                    DataGridViewCheckBoxCell chk = (DataGridViewCheckBoxCell)gridRow.Cells[0];
                    if (chk.Value != null && (bool)chk.Value)
                    {
                        totalQty += 1;
                    }
                }
                return totalQty.ToString();
            }
            catch
            {
                return null;
            }
        }

        private void pOrdDataGridView_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            switch (e.ColumnIndex)
            {
                case 0:
                    totalItemLabel.Text = "Total Items:  " + TotalItemQty();
                    break;
            }
        }

        
    }
}
